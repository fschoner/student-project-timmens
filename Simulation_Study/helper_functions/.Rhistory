d <- 8
k <- 1
kC <- 50
########
dat <- simAW(n, kC, d, add = FALSE)
rm(list=ls())
#this should serve as a first step toward the simulation study.
library(tidyverse)
library(np)
library(dplyr)
library(plyr)
#library(glm)
library(modelr)
library(rpart)
library(FNN)
library(lattice)
setwd("C:\\Users\\Flori\\Documents\\Project_Microeconometrics\\student-project-timmens\\Simulation_Study\\helper_functions")
source("simAW.R")
#Simulation in Wager, Athey (2018), JASA#
tau <- function(x1,x2){
(1+(1+exp(-250*(x1-1/3)))^(-1))*(1+(1+exp(-250*(x2-1/3)))^(-1))
}
x1 <- seq(-10,10, length= 100)
x2 <- x1
z <- outer(x1, x2, tau)
?outer
z[is.na(z)] <- 1
#outer(c(1,2),c(3,4))
wireframe(z, drape=T, col.regions=rainbow(100),
xlab="x1", ylab="x2", zlab="tau")
n <- 200
d <- 8
k <- 1
kC <- 50
########
dat <- simAW(n, kC, d, add = FALSE)
View(dat)
summary(dat$CATE)
round(summary(dat$CATE),3)
rm(list=ls())
#this should serve as a first step toward the simulation study.
library(tidyverse)
library(np)
library(dplyr)
library(plyr)
#library(glm)
library(modelr)
library(rpart)
library(FNN)
library(lattice)
setwd("C:\\Users\\Flori\\Documents\\Project_Microeconometrics\\student-project-timmens\\Simulation_Study\\helper_functions")
source("simAW.R")
#Simulation in Wager, Athey (2018), JASA#
tau <- function(x1,x2){
(1+(1+exp(-250*(x1-1/3)))^(-1))*(1+(1+exp(-250*(x2-1/3)))^(-1))
}
x1 <- seq(-10,10, length= 100)
x2 <- x1
z <- outer(x1, x2, tau)
?outer
z[is.na(z)] <- 1
#outer(c(1,2),c(3,4))
wireframe(z, drape=T, col.regions=rainbow(100),
xlab="x1", ylab="x2", zlab="tau")
n <- 200
d <- 8
k <- 1
kC <- 50
########
dat <- simAW(n, kC, d, add = FALSE)
View(dat)
rm(list=ls())
#this should serve as a first step toward the simulation study.
library(tidyverse)
library(np)
library(dplyr)
library(plyr)
#library(glm)
library(modelr)
library(rpart)
library(FNN)
library(lattice)
setwd("C:\\Users\\Flori\\Documents\\Project_Microeconometrics\\student-project-timmens\\Simulation_Study\\helper_functions")
source("simAW.R")
#Simulation in Wager, Athey (2018), JASA#
tau <- function(x1,x2){
(1+(1+exp(-250*(x1-1/3)))^(-1))*(1+(1+exp(-250*(x2-1/3)))^(-1))
}
x1 <- seq(-10,10, length= 100)
x2 <- x1
z <- outer(x1, x2, tau)
?outer
z[is.na(z)] <- 1
#outer(c(1,2),c(3,4))
wireframe(z, drape=T, col.regions=rainbow(100),
xlab="x1", ylab="x2", zlab="tau")
n <- 200
d <- 8
k <- 1
kC <- 50
########
dat <- simAW(n, kC, d, add = FALSE)
View(dat)
tau <- function(x1,x2){
(1+(1+exp(-100*(x1-1/50)))^(-1))*(1+(1+exp(-100*(x2-1/50)))^(-1))
}
x1 <- seq(-10,10, length= 100)
x2 <- x1
z <- outer(x1, x2, tau)
?outer
z[is.na(z)] <- 1
#outer(c(1,2),c(3,4))
wireframe(z, drape=T, col.regions=rainbow(100),
xlab="x1", ylab="x2", zlab="tau")
x1 <- seq(-10,10, length= 50)
x2 <- x1
z <- outer(x1, x2, tau)
?outer
z[is.na(z)] <- 1
#outer(c(1,2),c(3,4))
wireframe(z, drape=T, col.regions=rainbow(100),
xlab="x1", ylab="x2", zlab="tau")
dat <- sim(n, het_linear = FALSE, random_assignment = TRUE, k = 1, kC = 100,
non_linearY = FALSE, non_linearD = FALSE, diff_error = TRUE,
np_ps = FALSE)
rm(list=ls())
#setwd("C:\\Users\\Flori\\Documents\\Project_Microeconometrics\\functions_sim")
setwd("C:\\Users\\Flori\\Documents\\Project_Microeconometrics\\student-project-timmens\\Simulation_Study\\helper_functions")
source("MSE.R")
source("sim.R")
source("ols_cate.R")
source("rf_cate.R")
source("plot_data.R")
#source("estim_hir.R")
#loading packages#
pack <- c("tidyverse", "plyr", "dplyr", "np", "FNN", "modelr", "rpart", "doParallel", "sandwich",
"grf", "Matching", "boot", "stargazer","ggplot2")
invisible(suppressMessages(suppressWarnings(lapply(pack, require, character.only = TRUE))))
#choose n large enough to see consistency.
n <- 20000
#choose n large enough to see consistency.
n <- 2000
dat <- sim(n, het_linear = FALSE, random_assignment = FALSE, k = 1, kC = 75,
non_linearY = TRUE, non_linearD = FALSE, diff_error = TRUE,
np_ps = FALSE)
points(dat$X,dat$Y0,col="red")
#naive estimator
naive <- mean(dat$Y_obs[dat$D==1])-mean(dat$Y_obs[dat$D==0])
#what about k-nn?
knn <- mean(dat$tauihat)
#PSW
psmlogihr <-  (sum( (dat$D*dat$Y_obs) / dat$pslog) / sum( dat$D / dat$pslog))- (sum( ((1-dat$D)*dat$Y_obs) / (1-dat$pslog) ) / sum( (1-dat$D) / (1-dat$pslog) ))
plot(dat$X,dat$Y1,ylim=c(-35,35))
#psmlog <- mean((dat$D*dat$Y_obs)/dat$pslog - ((1-dat$D)*dat$Y_obs)/(1-dat$pslog))
psmprobihr <- (sum( (dat$D*dat$Y_obs) / dat$psprob) / sum( dat$D / dat$psprob))- (sum( ((1-dat$D)*dat$Y_obs) / (1-dat$psprob) ) / sum( (1-dat$D) / (1-dat$psprob) ))
reslm <- lm(dat$Y_obs ~ dat$D + dat$X + dat$IntXD)
reslm$coefficients
#also, OLS fully saturated doesn't work.
reslmwoin <- lm(dat$Y_obs ~ dat$D + dat$X)
reslmwoin$coefficients
#ATE RF
forest <- grf::causal_forest(X=as.matrix(dat$X),
Y=as.matrix(dat$Y_obs),
W=as.matrix(dat$D),
num.trees = 500,
honesty = TRUE,
min.node.size = 1,
seed=123)
ate_cf_robust <- grf::average_treatment_effect(forest, target.sample="overlap")
ate_cf_robust2 <- grf::average_treatment_effect(forest)
ate_cf_robust3 <- grf::average_treatment_effect(forest, target.sample="treated")
#oonly use this option where necessary!
summary(dat$trueps)
#CATE
#KNN CATE
mseknn <- MSE(dat$CATE,dat$tauhatknn)
#OLS CATE
mseols <- ols_cate(dat, C_ols_se5 = FALSE)$MSE
#RF CATE
mserf <- rf_cate(data = dat, num_trees = 2000)$MSE
df <- dat
df_part <- modelr::resample_partition(df, c(train = 0.5, test = 0.5))
df_train <- as.data.frame(df_part$train)
df_test <- as.data.frame(df_part$test)
set.seed(1001)
cf <- grf::causal_forest(X = as.matrix(df_train$X),
Y = as.matrix(df_train$Y_obs),
W = as.matrix(df_train$D),
num.trees = 100, # Make this larger for better acc.
num.threads = 1,
honesty = TRUE)
names(cf)
# Predict CATE and its std error for each individual on the dataset
cf_res <- predict(cf, as.matrix(df_test$X), estimate.variance = TRUE)
tauhatx_cf <- cf_res$predictions %>% as.numeric()
idtest <- df_part$test$idx
dat <- dat[idtest, ]
ggplot(dat, aes(x=X), legend = TRUE) +
geom_point(aes(y=Y_obs, col=factor(D))) +
geom_line(aes(y=tauhatknn, col="k-NN"), size = 1) +
geom_smooth(aes(y=(Y1-Y0), col="OLS"), method="lm", se = FALSE) +
geom_line(aes(y=tauhatx_cf, col="RF"), size=1) +
geom_line(aes(y=CATE), linetype = "dotted", col="black", size = 1.25)
idtest <- df_part$test$idx
dat <- dat[idtest, ]
ggplot(dat, aes(x=X), legend = TRUE) +
geom_point(aes(y=Y_obs, col=factor(D))) +
geom_line(aes(y=tauhatknn), size = 1) +
geom_smooth(aes(y=(Y1-Y0), col="OLS"), method="lm", se = FALSE) +
geom_line(aes(y=tauhatx_cf, col="RF"), size=1) +
geom_line(aes(y=CATE), linetype = "dotted", col="black", size = 1.25)
idtest <- df_part$test$idx
dat <- dat[idtest, ]
ggplot(dat, aes(x=X), legend = TRUE) +
geom_point(aes(y=Y_obs, col=factor(D))) +
geom_line(aes(y=tauhatknn, col="k-NN"), size = 1) +
geom_smooth(aes(y=(Y1-Y0), col="OLS"), method="lm", se = FALSE) +
geom_line(aes(y=tauhatx_cf, col="RF"), size=1) +
geom_line(aes(y=CATE), linetype = "dotted", col="black", size = 1.25)
dat <- sim(n, het_linear = FALSE, random_assignment = FALSE, k = 1, kC = 75,
non_linearY = TRUE, non_linearD = FALSE, diff_error = TRUE,
np_ps = FALSE)
plot(dat$X,dat$Y1,ylim=c(-35,35))
points(dat$X,dat$Y0,col="red")
#ATE
#naive estimator
naive <- mean(dat$Y_obs[dat$D==1])-mean(dat$Y_obs[dat$D==0])
#what about k-nn?
knn <- mean(dat$tauihat)
#PSW
psmlogihr <-  (sum( (dat$D*dat$Y_obs) / dat$pslog) / sum( dat$D / dat$pslog))- (sum( ((1-dat$D)*dat$Y_obs) / (1-dat$pslog) ) / sum( (1-dat$D) / (1-dat$pslog) ))
#psmlog <- mean((dat$D*dat$Y_obs)/dat$pslog - ((1-dat$D)*dat$Y_obs)/(1-dat$pslog))
psmprobihr <- (sum( (dat$D*dat$Y_obs) / dat$psprob) / sum( dat$D / dat$psprob))- (sum( ((1-dat$D)*dat$Y_obs) / (1-dat$psprob) ) / sum( (1-dat$D) / (1-dat$psprob) ))
reslm <- lm(dat$Y_obs ~ dat$D + dat$X + dat$IntXD)
reslm$coefficients
#also, OLS fully saturated doesn't work.
reslmwoin <- lm(dat$Y_obs ~ dat$D + dat$X)
reslmwoin$coefficients
#ATE RF
forest <- grf::causal_forest(X=as.matrix(dat$X),
Y=as.matrix(dat$Y_obs),
W=as.matrix(dat$D),
num.trees = 100,
honesty = TRUE,
min.node.size = 1,
seed=123)
ate_cf_robust <- grf::average_treatment_effect(forest, target.sample="overlap")
ate_cf_robust2 <- grf::average_treatment_effect(forest)
ate_cf_robust3 <- grf::average_treatment_effect(forest, target.sample="treated")
#oonly use this option where necessary!
summary(dat$trueps)
#CATE
#KNN CATE
mseknn <- MSE(dat$CATE,dat$tauhatknn)
#OLS CATE
mseols <- ols_cate(dat, C_ols_se5 = FALSE)$MSE
#RF CATE
mserf <- rf_cate(data = dat, num_trees = 2000)$MSE
df <- dat
df_part <- modelr::resample_partition(df, c(train = 0.5, test = 0.5))
df_train <- as.data.frame(df_part$train)
df_test <- as.data.frame(df_part$test)
set.seed(1001)
cf <- grf::causal_forest(X = as.matrix(df_train$X),
Y = as.matrix(df_train$Y_obs),
W = as.matrix(df_train$D),
num.trees = 100, # Make this larger for better acc.
num.threads = 1,
honesty = TRUE)
names(cf)
# Predict CATE and its std error for each individual on the dataset
cf_res <- predict(cf, as.matrix(df_test$X), estimate.variance = TRUE)
tauhatx_cf <- cf_res$predictions %>% as.numeric()
idtest <- df_part$test$idx
dat <- dat[idtest, ]
ggplot(dat, aes(x=X), legend = TRUE) +
geom_point(aes(y=Y_obs, col=factor(D))) +
geom_line(aes(y=tauhatknn, col="k-NN"), size = 1) +
geom_smooth(aes(y=(Y1-Y0), col="OLS"), method="lm", se = FALSE) +
geom_line(aes(y=tauhatx_cf, col="RF"), size=1) +
geom_line(aes(y=CATE), linetype = "dotted", col="black", size = 1.25)
ggplot(dat, aes(x=X), legend = TRUE) +
geom_point(aes(y=Y_obs, col=factor(D))) +
geom_line(aes(y=tauhatknn), size = 1) +
geom_smooth(aes(y=(Y1-Y0), col="OLS"), method="lm", se = FALSE) +
geom_line(aes(y=tauhatx_cf, col="RF"), size=1) +
geom_line(aes(y=CATE), linetype = "dotted", col="black", size = 1.25)
ggplot(df, aes(x=X), legend = TRUE) +
geom_point(aes(y=Y_obs, col=factor(D))) +
geom_line(aes(y=tauhatknn, col="k-NN"), size = 1) +
geom_smooth(aes(y=(Y1-Y0), col="OLS"), method="lm", se = FALSE) +
geom_line(aes(y=tauhatx_cf, col="RF"), size=1) +
geom_line(aes(y=CATE), linetype = "dotted", col="black", size = 1.25)
?dlply
rm(list=ls())
#this should serve as a first step toward the simulation study.
library(tidyverse)
library(np)
library(dplyr)
library(plyr)
#library(glm)
library(modelr)
library(rpart)
library(FNN)
library(lattice)
setwd("C:\\Users\\Flori\\Documents\\Project_Microeconometrics\\student-project-timmens\\Simulation_Study\\helper_functions")
tau <- function(x1,x2){
(1+(1+exp(-20*(x1-1/3)))^(-1))*(1+(1+exp(-20*(x2-1/3)))^(-1))
}
x1 <- seq(-10,10, length= 50)
x2 <- x1
z <- outer(x1, x2, tau)
?outer
z[is.na(z)] <- 1
#outer(c(1,2),c(3,4))
wireframe(z, drape=T, col.regions=rainbow(100),
xlab="x1", ylab="x2", zlab="tau")
x1 <- seq(-1,1, length= 50)
x2 <- x1
z <- outer(x1, x2, tau)
?outer
z[is.na(z)] <- 1
#outer(c(1,2),c(3,4))
wireframe(z, drape=T, col.regions=rainbow(100),
xlab="x1", ylab="x2", zlab="tau")
tau <- function(x1,x2){
#(1+(1+exp(-20*(x1-1/3)))^(-1))*(1+(1+exp(-20*(x2-1/3)))^(-1))
(1+(1+exp(-50*(x1-1/3)))^(-1))*(1+(1+exp(-50*(x2-1/3)))^(-1))
}
x1 <- seq(-1,1, length= 50)
x2 <- x1
z <- outer(x1, x2, tau)
?outer
z[is.na(z)] <- 1
#outer(c(1,2),c(3,4))
wireframe(z, drape=T, col.regions=rainbow(100),
xlab="x1", ylab="x2", zlab="tau")
tau <- function(x1,x2){
#(1+(1+exp(-20*(x1-1/3)))^(-1))*(1+(1+exp(-20*(x2-1/3)))^(-1))
(1+(1+exp(-150*(x1-1/3)))^(-1))*(1+(1+exp(-150*(x2-1/3)))^(-1))
}
x1 <- seq(-1,1, length= 50)
x2 <- x1
z <- outer(x1, x2, tau)
?outer
z[is.na(z)] <- 1
#outer(c(1,2),c(3,4))
wireframe(z, drape=T, col.regions=rainbow(100),
xlab="x1", ylab="x2", zlab="tau")
tau <- function(x1,x2){
#(1+(1+exp(-20*(x1-1/3)))^(-1))*(1+(1+exp(-20*(x2-1/3)))^(-1))
(1+(1+exp(-20*(x1-1/3)))^(-1))*(1+(1+exp(-20*(x2-1/3)))^(-1))
}
x1 <- seq(-1,1, length= 50)
x2 <- x1
z <- outer(x1, x2, tau)
?outer
z[is.na(z)] <- 1
#outer(c(1,2),c(3,4))
wireframe(z, drape=T, col.regions=rainbow(100),
xlab="x1", ylab="x2", zlab="tau")
rm(list=ls())
setwd("C:\\Users\\Flori\\Documents\\Project_Microeconometrics\\student-project-timmens\\Simulation_Study\\helper_functions")
pack <- c("tidyverse", "plyr", "dplyr", "np", "FNN", "modelr", "rpart", "doParallel", "sandwich",
"grf", "Matching", "boot", "stargazer")
invisible(suppressMessages(suppressWarnings(lapply(pack, require, character.only = TRUE))))
source("sim.R")
source("naive_ate.R")
source("psw_ate_boot.R")
source("ols_ate.R")
source("knn_ate.R")
source("rf_ate.R")
source("MSE.R")
source("ols_cate.R")
source("knn_cate.R")
source("rf_cate.R")
source("C:\\Users\\Flori\\Documents\\Project_Microeconometrics\\student-project-timmens\\Simulation_Study\\create_output_table.R")
create_output_table(n = 1000, N = 500, B = 500, k = 1, kC = 7, num_trees = 100,
het_linear = FALSE, random_assignment = TRUE,
non_linearY = FALSE, non_linearD = FALSE,
knn_se5 = FALSE, ols_se5 = FALSE, C_ols_se5 = FALSE,
C_knn_se5 = FALSE, boot5 = FALSE,
para = FALSE)
create_output_table(n = 1000, N = 500, B = 500, k = 1, kC = 20, num_trees = 100,
het_linear = FALSE, random_assignment = TRUE,
non_linearY = FALSE, non_linearD = FALSE,
knn_se5 = TRUE, ols_se5 = TRUE, C_ols_se5 = TRUE,
C_knn_se5 = TRUE, boot5 = FALSE,
para = FALSE)
create_output_table(n = 500, N = 500, B = 500, k = 1, kC = 20, num_trees = 100,
het_linear = FALSE, random_assignment = TRUE,
non_linearY = FALSE, non_linearD = FALSE, method_ols = "full",
knn_se5 = TRUE, ols_se5 = TRUE, C_ols_se5 = TRUE,
C_knn_se5 = TRUE, boot5 = FALSE,
para = FALSE)
##############################################################################################################################
##########################################################Simulation Study####################################################
##################This code only develops the simulation study, taking methods from "linear2" as given.#######################
rm(list=ls())
setwd("C:\\Users\\Flori\\Documents\\Project_Microeconometrics\\functions_sim")
source("sim.R")
source("naive_ate.R")
source("b_lm.R")
rm(list=ls())
#setwd("C:\\Users\\Flori\\Documents\\Project_Microeconometrics\\functions_sim")
setwd("C:\\Users\\Flori\\Documents\\Project_Microeconometrics\\student-project-timmens\\Simulation_Study\\helper_functions")
source("sim.R")
source("MSE.R")
source("ols_cate.R")
source("rf_cate.R")
source("plot_data.R")
#source("estim_hir.R")
#loading packages#
pack <- c("tidyverse", "plyr", "dplyr", "np", "FNN", "modelr", "rpart", "doParallel", "sandwich",
"grf", "Matching", "boot", "stargazer","ggplot2")
invisible(suppressMessages(suppressWarnings(lapply(pack, require, character.only = TRUE))))
#choose n large enough to see consistency.
n <- 2000
#choose n large enough to see consistency.
n <- 500
dat <- sim(n, het_linear = FALSE, random_assignment = TRUE, k = 1, kC = 20,
non_linearY = FALSE, non_linearD = FALSE, diff_error = TRUE,
np_ps = FALSE)
plot(dat$X,dat$Y1,ylim=c(-5,15))
points(dat$X,dat$Y0,col="red")
#naive estimator
naive <- mean(dat$Y_obs[dat$D==1])-mean(dat$Y_obs[dat$D==0])
#what about k-nn?
knn <- mean(dat$tauihat)
#linear model
reslm <- lm(dat$Y_obs~dat$D)
ols <- as.numeric(reslm$coefficients[2])
reslmwx <- lm(Y_obs ~ D + X, data = dat)
olswx <- as.numeric(reslmwx$coefficients[2])
reslmwxint <- lm(Y_obs ~ D + X + IntXD, data = dat)
olswxint <- as.numeric(reslmwxint$coefficients[2])
#PSW
#always compare logit and probit.
#here it's not necessary to do this.
psmlogihr <-  (sum( (dat$D*dat$Y_obs) / dat$pslog) / sum( dat$D / dat$pslog))- (sum( ((1-dat$D)*dat$Y_obs) / (1-dat$pslog) ) / sum( (1-dat$D) / (1-dat$pslog) ))
psmprobihr <- (sum( (dat$D*dat$Y_obs) / dat$psprob) / sum( dat$D / dat$psprob))- (sum( ((1-dat$D)*dat$Y_obs) / (1-dat$psprob) ) / sum( (1-dat$D) / (1-dat$psprob) ))
psmcheatihr <- (sum( (dat$D*dat$Y_obs) / dat$trueps) / sum( dat$D / dat$trueps))- (sum( ((1-dat$D)*dat$Y_obs) / (1-dat$trueps) ) / sum( (1-dat$D) / (1-dat$trueps) ))
#CATE
CATE01 <- as.numeric(reslm$coefficients[2])
#works.
#here, quite artificially, we also apply direct conditional mean estimation.
#constants suffice since conditional means are only constants :-)
mu1hat <- as.numeric(lm(dat$Y_obs[dat$D==1]~1)$coefficients[1])
mu0hat <- as.numeric(lm(dat$Y_obs[dat$D==0]~1)$coefficients[1])
lines(dat$X[dat$D==1],lm(dat$Y_obs[dat$D==1]~1)$fitted.values,col="green")
CATE02 <- mu1hat-mu0hat
lines(dat$X[dat$D==0],lm(dat$Y_obs[dat$D==0]~1)$fitted.values,col="green")
#cate with k-nn?
points(dat$X,(dat$tauhatknn),col="green")
summary(dat$tauhatknn)
plot(density(dat$tauhatknn))
create_output_table(n = 1000, N = 500, B = 500, k = 1, kC = 20, num_trees = 100,
het_linear = FALSE, random_assignment = TRUE,
non_linearY = FALSE, non_linearD = FALSE, method_ols = "full",
knn_se5 = TRUE, ols_se5 = TRUE, C_ols_se5 = TRUE,
C_knn_se5 = TRUE, boot5 = FALSE,
para = FALSE)
rm(list=ls())
setwd("C:\\Users\\Flori\\Documents\\Project_Microeconometrics\\student-project-timmens\\Simulation_Study\\helper_functions")
pack <- c("tidyverse", "plyr", "dplyr", "np", "FNN", "modelr", "rpart", "doParallel", "sandwich",
"grf", "Matching", "boot", "stargazer")
source("sim.R")
invisible(suppressMessages(suppressWarnings(lapply(pack, require, character.only = TRUE))))
source("naive_ate.R")
source("psw_ate_boot.R")
source("ols_ate.R")
source("knn_ate.R")
source("rf_ate.R")
source("MSE.R")
source("ols_cate.R")
source("knn_cate.R")
source("rf_cate.R")
source("C:\\Users\\Flori\\Documents\\Project_Microeconometrics\\student-project-timmens\\Simulation_Study\\create_output_table.R")
create_output_table(n = 1000, N = 500, B = 500, k = 1, kC = 20, num_trees = 100,
het_linear = FALSE, random_assignment = TRUE,
non_linearY = FALSE, non_linearD = FALSE, method_ols = "full",
knn_se5 = TRUE, ols_se5 = TRUE, C_ols_se5 = TRUE,
C_knn_se5 = TRUE, boot5 = FALSE,
para = FALSE)
rm(list=ls())
setwd("C:\\Users\\Flori\\Documents\\Project_Microeconometrics\\student-project-timmens\\Simulation_Study\\helper_functions")
pack <- c("tidyverse", "plyr", "dplyr", "np", "FNN", "modelr", "rpart", "doParallel", "sandwich",
"grf", "Matching", "boot", "stargazer")
invisible(suppressMessages(suppressWarnings(lapply(pack, require, character.only = TRUE))))
source("sim.R")
source("naive_ate.R")
source("psw_ate_boot.R")
source("ols_ate.R")
source("knn_ate.R")
source("rf_ate.R")
source("MSE.R")
source("knn_cate.R")
source("ols_cate.R")
source("rf_cate.R")
source("C:\\Users\\Flori\\Documents\\Project_Microeconometrics\\student-project-timmens\\Simulation_Study\\create_output_table.R")
create_output_table(n = 1000, N = 500, B = 500, k = 1, kC = 20, num_trees = 100,
het_linear = FALSE, random_assignment = TRUE,
non_linearY = FALSE, non_linearD = FALSE, method_ols = "full",
knn_se5 = TRUE, ols_se5 = TRUE, C_ols_se5 = TRUE,
C_knn_se5 = TRUE, boot5 = FALSE,
para = FALSE)
create_output_table(n = 100, N = 500, B = 500, k = 1, kC = 20, num_trees = 100,
het_linear = FALSE, random_assignment = TRUE,
non_linearY = FALSE, non_linearD = FALSE, method_ols = "full",
knn_se5 = TRUE, ols_se5 = TRUE, C_ols_se5 = TRUE,
C_knn_se5 = TRUE, boot5 = FALSE,
para = FALSE)
